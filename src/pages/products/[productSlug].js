import Head from 'next/head'

import Layout from '@components/Layout';
import Header from '@components/Header';
import Container from '@components/Container';
import Button from '@components/Button';

import { ApolloClient, InMemoryCache, gql } from '@apollo/client';
import styles from '@styles/Product.module.scss'

export default function Product({product}) {
  return (
    <Layout>
      <Head>
        <title>{product.name}</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <Container>
        <div className={styles.productWrapper}>
          <div className={styles.productImage}>
            Image
          </div>
          <div className={styles.productContent}>
            <h1>Product Name</h1>
            <div className={styles.productDescription}>
              <p>Description</p>
            </div>
            <p className={styles.productPrice}>
              ${product.price}
            </p>
            <p className={styles.productBuy}>
              <Button>
                Add to Cart
              </Button>
            </p>
          </div>
        </div>
      </Container>
    </Layout>
  )
}

export async function getStaticProps({params}) {
  const client = new ApolloClient({
    uri: 'https://api-sa-east-1.hygraph.com/v2/cle4724kv0alm01us2m2thvt1/master',
    cache: new InMemoryCache(),
  });

  const data = await client.query({
    query: gql`
      query PageProduct($slug: String) {
        product(where: {slug: $slug}) {
          id
          name
          price
          image
          description {
            html
          }
        }
      }
   `,
   variables: {
    slug: params.productSlug
   }
  })
  console.log('data', data)
  const product = data.data.product;
  return {
    props: {
      product
    }
  }
}
export async function getStaticPaths() {
  const client = new ApolloClient({
    uri: 'https://api-sa-east-1.hygraph.com/v2/cle4724kv0alm01us2m2thvt1/master',
    cache: new InMemoryCache(),
  });

  const data = await client.query({
    query: gql`
      query PageProducts {
        products {
          name
          price
          slug
          image
        }
      }
   `
  })
  
  const paths = data.data.products.map(product => {
    return {
      params: {
        productSlug: product.slug
      }
    }
  })

  return {
    paths,
    fallback: false
  }
}